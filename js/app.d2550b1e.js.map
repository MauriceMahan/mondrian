{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/scripts/utils.js","webpack:///./src/scripts/colorBlock.js","webpack:///./src/scripts/setBlocks.js","webpack:///./src/scripts/sizeBlock.js","webpack:///./src/scripts/sizeAllBlocks.js","webpack:///./src/scripts/index.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","getRandomInt","min","max","Math","floor","random","getColumnSpan","blockSize","getRowSpan","checkMaxMin","arguments","undefined","input","parseInt","colorBlocks","el","colors","setColor","style","backgroundColor","concat","setBlocks","_x","_x2","_setBlocks","this","_callee","desiredAmount","currentBlocks","generatedBlocks","block","regeneratorRuntime","wrap","_context","prev","next","querySelectorAll","colorBlock","document","createElement","appendChild","_toConsumableArray","querySelector","remove","abrupt","stop","sizeBlock","col","row","gridColumn","gridRow","sizeAllBlocks","blocks","primaryBlockSet","primaryBlocks","assignedPrimary","totalBlocks","includes","sizeAllBlocks_toConsumableArray","forEach","index","colSpan","rowSpan","main","inputTotalBlocks","getElementById","inputBlockSize","inputPrimaryBlocks","generateColors","generateSizes","generateAll","then","generated","catch","e","console","log","addEventListener","totalBlocksHandler","target","blockSizeHandler","primaryBlockHandler"],"mappings":"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","file":"js/app.d2550b1e.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([97,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/**\r\n * Generate an Integer\r\n * @param {Integer} min\r\n * @param {Integer} max\r\n */\r\nexport function getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);;\r\n}\r\n\r\n/**\r\n * Generate grid column span\r\n * @param {Integer} blockSize\r\n */\r\nexport function getColumnSpan(blockSize) {\r\n    return getRandomInt(1, blockSize);\r\n}\r\n\r\n/**\r\n* Generate grid row span\r\n* @param {Integer} blockSize\r\n*/\r\nexport function getRowSpan(blockSize) {\r\n    return getRandomInt(1, blockSize);\r\n}\r\n\r\n/**\r\n * Checks value and set to min/max amount if out of range\r\n * @param {Integer} value Value to check\r\n * @param {Integer} max Maximum number value can be\r\n * @param {Integer} min Minimum number value can be\r\n */\r\nexport function checkMaxMin(value, max = 9999, min = 1, input) {\r\n    value = parseInt(value);\r\n    max = parseInt(max);\r\n    min = parseInt(min);\r\n\r\n    // If supplied value is greater than max\r\n    if (value > max) {\r\n        value = max;\r\n\r\n    // If supplied value is less than max\r\n    } else if (value < min) {\r\n        value = min;\r\n    }\r\n\r\n    // If input is supplied change the  value\r\n    if (input !== undefined) {\r\n        input.value = value || min; // Do not allow blank values\r\n    }\r\n\r\n    return value;\r\n}","import { getRandomInt } from './utils';\r\n/**\r\n * Adds background color to a block\r\n * @param {HTMLElement} el Element\r\n * @param {string[]} colors Colors\r\n */\r\nexport default function colorBlocks(el, colors) {\r\n    const setColor = getRandomInt(0, colors.length - 1);\r\n\r\n    el.style.backgroundColor = `${[colors[setColor]]}`;\r\n};\r\n","import { colors } from './index';\r\nimport colorBlock from './colorBlock';\r\n\r\n/**\r\n * Set blocks inside of an element\r\n * @param {Integer} desiredAmount Total amount of blocks wanted\r\n * @param {HTMLElement} el Main element to append blocks to\r\n */\r\nexport default async function setBlocks(desiredAmount, el) {\r\n    let currentBlocks = el.querySelectorAll('li').length;\r\n    let generatedBlocks = [];\r\n\r\n    /**\r\n     * Creates blocks if requested amount is more than is\r\n     * currently rendered on the page.\r\n     */\r\n    while (currentBlocks < desiredAmount) {\r\n        const block = document.createElement('li');\r\n\r\n        // Color each block\r\n        colorBlock(block, colors);\r\n        // Add block to DOM\r\n        el.appendChild(block);\r\n        // Add block to generated block array to return later\r\n        generatedBlocks = [...generatedBlocks, block];\r\n        // Update total amount of blocks on the page\r\n        currentBlocks = el.querySelectorAll('li').length;\r\n    }\r\n\r\n    /**\r\n     * Removes blocks if requested amount is less than is\r\n     * currently rendered on the page.\r\n     */\r\n    while (currentBlocks > desiredAmount) {\r\n        const block = el.querySelector('li:last-child');\r\n\r\n        block.remove();\r\n        currentBlocks = el.querySelectorAll('li').length;\r\n    }\r\n\r\n    return generatedBlocks;\r\n};","/**\r\n * Size a block\r\n * @param {HTMLElement} el Block to resize\r\n * @param {Integer} col Set grid column size\r\n * @param {Integer} row Set grid row size\r\n */\r\nexport default function sizeBlock(el, col, row) {\r\n    el.style.gridColumn = `span ${col}`;\r\n    el.style.gridRow = `span ${row}`;\r\n};","import sizeBlock from './sizeBlock';\r\nimport { getColumnSpan, getRandomInt, getRowSpan } from './utils';\r\nimport { primaryBlocks, totalBlocks, blockSize } from './index';\r\n\r\n/**\r\n * Size a collection of blocks\r\n * @param {NodeList} blocks\r\n */\r\nexport default function sizeAllBlocks(blocks) {\r\n    let primaryBlockSet = [];\r\n\r\n    // Assign random blocks as a `primary`\r\n    for (let i = 0; i < primaryBlocks; i++) {\r\n        let assignedPrimary = getRandomInt(0, totalBlocks - 1);\r\n\r\n        // Do not allow duplicates\r\n        while (primaryBlockSet.includes(assignedPrimary)) {\r\n            assignedPrimary = getRandomInt(0, totalBlocks - 1);\r\n        }\r\n\r\n        // Keeping track of which blocks are `primary`\r\n        primaryBlockSet = [...primaryBlockSet, assignedPrimary];\r\n    }\r\n\r\n    blocks.forEach((block, index) => {\r\n        /**\r\n         * If this block's index is in the primary block array\r\n         *  then use the maximum size and exit the function.\r\n         */\r\n        if (primaryBlockSet.includes(index)) {\r\n            sizeBlock(block, blockSize, blockSize);\r\n            return;\r\n        }\r\n\r\n        let colSpan = getColumnSpan(blockSize);\r\n        let rowSpan = getRowSpan(blockSize);\r\n\r\n        // Do not allow other primary-sized blocks to be added\r\n        while (colSpan + rowSpan === blockSize * 2) {\r\n            if (blockSize === 1)\r\n                break;\r\n            colSpan = getColumnSpan(blockSize);\r\n            rowSpan = getRowSpan(blockSize);\r\n        }\r\n\r\n        sizeBlock(block, colSpan, rowSpan);\r\n    });\r\n};\r\n","import '../styles/index.scss';\r\nimport colorBlock from './colorBlock';\r\nimport setBlocks from './setBlocks';\r\nimport { checkMaxMin } from './utils';\r\nimport sizeAllBlocks from './sizeAllBlocks';\r\n\r\n// Selectors\r\nconst main = document.querySelector('.main');\r\nconst inputTotalBlocks = document.getElementById('total-blocks');\r\nconst inputBlockSize = document.getElementById('block-size');\r\nconst inputPrimaryBlocks = document.getElementById('primary-blocks');\r\nconst generateColors = document.getElementById('generate-colors');\r\nconst generateSizes = document.getElementById('generate-sizes');\r\nconst generateAll = document.getElementById('generate-all');\r\n\r\n// Variables\r\nexport let totalBlocks = 75;\r\nexport let primaryBlocks = 3;\r\nexport let blockSize = 3;\r\nexport let colors = [\r\n    '#fff',\r\n    '#eeefdf',\r\n    '#1C1B1B',\r\n    '#e43323',\r\n    '#1a1d99',\r\n    '#fcd46b'\r\n];\r\n\r\n// Initialize\r\nsetBlocks(totalBlocks, main)\r\n    .then(generated => sizeAllBlocks(generated))\r\n    .catch(e => console.log(e));\r\n\r\n// Event listeners\r\nwindow.addEventListener('DOMContentLoaded', (e) => {\r\n    inputTotalBlocks.value = totalBlocks;\r\n    inputBlockSize.value = blockSize;\r\n    inputPrimaryBlocks.value = primaryBlocks;\r\n});\r\n\r\n// Event handler for changing total amount of blocks\r\nconst totalBlocksHandler = (e) => {\r\n    const target = e.target;\r\n    const max = target.max;\r\n    let value = target.value;\r\n\r\n    totalBlocks = checkMaxMin(value, max, null, target);\r\n    setBlocks(totalBlocks, main)\r\n        .then(generated => sizeAllBlocks(generated))\r\n        .catch(e => console.log(e));\r\n};\r\n\r\ninputTotalBlocks.addEventListener('change', totalBlocksHandler);\r\ninputTotalBlocks.addEventListener('keyup', totalBlocksHandler);\r\n\r\n// Event handler for changing max block size\r\nconst blockSizeHandler = (e) => {\r\n    const target = e.target;\r\n    const value = target.value;\r\n    const max = target.max;\r\n    const min = target.min;\r\n\r\n    blockSize = checkMaxMin(value, max, min, target);\r\n    sizeAllBlocks(main.querySelectorAll('li'));\r\n};\r\n\r\ninputBlockSize.addEventListener('change', blockSizeHandler);\r\ninputBlockSize.addEventListener('keyup', blockSizeHandler);\r\n\r\n// Event handler for changing primary block amount\r\nconst primaryBlockHandler = (e) => {\r\n    const target = e.target;\r\n    let value = target.value;\r\n\r\n    value = checkMaxMin(value, totalBlocks, 1, target);\r\n\r\n    primaryBlocks = value;\r\n    sizeAllBlocks(main.querySelectorAll('li'));\r\n};\r\n\r\ninputPrimaryBlocks.addEventListener('change', primaryBlockHandler);\r\ninputPrimaryBlocks.addEventListener('keyup', primaryBlockHandler);\r\n\r\n// Button to randomly generate new colors\r\ngenerateColors.addEventListener('click', e => {\r\n    main.querySelectorAll('li').forEach(el => {\r\n        colorBlock(el, colors);\r\n    });\r\n});\r\n\r\n// Button to randomly generate new sizes\r\ngenerateSizes.addEventListener('click', e => {\r\n    sizeAllBlocks(main.querySelectorAll('li'));\r\n});\r\n\r\n// Randomly regenerate everything\r\ngenerateAll.addEventListener('click', (e) => {\r\n    sizeAllBlocks(main.querySelectorAll('li'));\r\n    main.querySelectorAll('li').forEach(el => {\r\n        colorBlock(el, colors);\r\n    });\r\n});"],"sourceRoot":""}